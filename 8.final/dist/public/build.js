(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();const e={description:{data:()=>({goods:new Map,cart:new Map,value:0,filteredGoods:new Map,connectionError:!1}),methods:{addToCart(t){this.cart.set(t,(this.cart.get(t)||0)+1),this.value+=this.goods.get(t).price,this.updateCartFile()},getGood(t){return this.goods.get(t)},removeFromCart(t,e=!1){let i=this.cart.get(t);e?(this.cart.delete(t),this.value-=this.goods.get(t).price*i):(1==i?this.cart.delete(t):this.cart.set(t,i-1),this.value-=this.goods.get(t).price),this.updateCartFile()},updateCartFile(){fetch("/cart",{method:"POST",headers:{"Content-Type":"Application/json"},body:JSON.stringify([...this.cart].map((t=>({id:t[0],quantity:t[1]}))))}).catch((t=>{console.log(t),this.connectionError=!0}))}},mounted(){fetch("/goods").then((t=>t.json())).then((t=>{t.forEach((t=>this.goods.set(t.id,t))),this.filteredGoods=this.goods})).catch((t=>{console.log(t),this.connectionError=!0})),fetch("/cart").then((t=>t.json())).then((t=>{t.forEach((t=>{this.cart.set(t.id,t.quantity),this.value+=this.goods.get(t.id).price*t.quantity}))})).catch((t=>{console.log(t),this.connectionError=!0}))}}},i={description:{props:["good"],template:'\n        <div class="goods-item">\n            <div class="image">\n                <img :src="good.img">\n            </div>\n            <div>\n                <h3>{{ good.title }}</h3>\n                <p>&#x0024;{{ good.price }}</p>\n                <button v-on:click=\'addToCart(good.id)\'>+</button>\n            </div>\n        </div>\n    ',methods:{addToCart(e){t.g.main.addToCart(e)}}}},o={description:{props:["quantity","id"],data:()=>({item:{}}),template:'\n        <div class="cart-item">\n            <span>{{ getGood() }}</span>\n            <div class="wrapper">\n                <button v-on:click="removeFromCart">X</button>\n                <button v-on:click="subtractFromCart">-</button>\n                <img :src="item.img">\n                <div class="cart-item-price-info">\n                    <div>&#x0024;{{ getValue() }}</div>\n                    <div>{{ quantity }} шт. по &#x0024;{{ item.price }}</div>\n                </div>\n            </div>\n        </div>\n    ',methods:{getGood(){return this.item=t.g.main.getGood(this.id),this.item.title},removeFromCart(e){t.g.main.removeFromCart(this.id,!0)},subtractFromCart(){t.g.main.removeFromCart(this.id)},getValue(){return this.quantity*this.item.price}}}},n={description:{data:()=>({search_query:""}),template:'\n        <div class="search">\n            <input type="text" v-model="search_query" id="search_query" v-on:input="search">\n        </div>\n    ',methods:{search(){if(""==this.search_query)t.g.main.filteredGoods=main.goods;else{main.filteredGoods=new Map;const e=new RegExp(this.search_query,"gi");[...t.g.main.goods].filter((t=>e.test(t[1].title))).map((e=>{t.g.main.filteredGoods.set(e[1].id,t.g.main.goods.get(e[1].id))}))}}}}},r=Vue.createApp(e.description);r.component("goods-item",i.description),r.component("cart-item",o.description),r.component("search",n.description),t.g.main=r.mount("#main")})();